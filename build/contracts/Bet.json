{
  "contractName": "Bet",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_guess",
          "type": "uint8"
        }
      ],
      "name": "createBet",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "payout",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_guess",
          "type": "uint8"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_guess",
          "type": "uint8"
        }
      ],
      "name": "takeBet",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "event",
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "gameStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "originatorStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "originatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "originatorGuess",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "takerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "takerStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "takerGuess",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "betAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "actualNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "pot",
          "type": "uint256"
        }
      ],
      "name": "BetStatus"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "gameStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "originatorStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "originatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "originatorGuess",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "takerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "takerStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "takerGuess",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "betAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "actualNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "pot",
          "type": "uint256"
        }
      ],
      "name": "BetStatus",
      "type": "event"
    }
  ],
  "bytecode": "0x6060604052341561000f57600080fd5b61100b8061001e6000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634a0ca9751461005957806363bd1d4a14610074578063dc2be4c21461007e575b005b610072600480803560ff16906020019091905050610099565b005b61007c61036a565b005b610097600480803560ff1690602001909190505061076b565b005b600060038111156100a657fe5b600060020160009054906101000a900460ff1660038111156100c457fe5b1480156100fc5750600060058111156100d957fe5b600060030160010160149054906101000a900460ff1660058111156100fa57fe5b145b801561013357506000600581111561011057fe5b600060060160010160149054906101000a900460ff16600581111561013157fe5b145b151561013e57600080fd5b60a06040519081016040528060008152602001600081526020016001600381111561016557fe5b81526020016080604051908101604052808460ff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600460058111156101a857fe5b815260200134815250815260200160806040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060058111156101f357fe5b8152602001600081525081525060008082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561023957fe5b02179055506060820151816003016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360058111156102bc57fe5b02179055506060820151816002015550506080820151816006016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083600581111561034b57fe5b0217905550606082015181600201555050905050610367610924565b50565b600080600080600061037b33610b22565b6002600381111561038857fe5b600060020160009054906101000a900460ff1660038111156103a657fe5b1480156103de5750600060058111156103bb57fe5b600060030160010160149054906101000a900460ff1660058111156103dc57fe5b115b80156104155750600460058111156103f257fe5b600060030160010160149054906101000a900460ff16600581111561041357fe5b105b801561044c57506000600581111561042957fe5b600060060160010160149054906101000a900460ff16600581111561044a57fe5b115b801561048357506004600581111561046057fe5b600060060160010160149054906101000a900460ff16600581111561048157fe5b105b151561048e57600080fd5b60008001549450600060030160010160149054906101000a900460ff169350600060060160010160149054906101000a900460ff169250600060030160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600060060160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610523610be5565b6003600581111561053057fe5b84600581111561053c57fe5b14801561055f57506003600581111561055157fe5b83600581111561055d57fe5b145b15610601578173ffffffffffffffffffffffffffffffffffffffff166108fc60028781151561058a57fe5b049081150290604051600060405180830381858888f1935050505015156105b057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6002878115156105d657fe5b049081150290604051600060405180830381858888f1935050505015156105fc57600080fd5b610764565b6001600581111561060e57fe5b84600581111561061a57fe5b1415610665578173ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050151561066057600080fd5b610763565b6001600581111561067257fe5b83600581111561067e57fe5b14156106c9578073ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f1935050505015156106c457600080fd5b610762565b8173ffffffffffffffffffffffffffffffffffffffff166108fc6002878115156106ef57fe5b049081150290604051600060405180830381858888f19350505050151561071557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc60028781151561073b57fe5b049081150290604051600060405180830381858888f19350505050151561076157600080fd5b5b5b5b5050505050565b6001600381111561077857fe5b600060020160009054906101000a900460ff16600381111561079657fe5b1480156107ce5750600460058111156107ab57fe5b600060030160010160149054906101000a900460ff1660058111156107cc57fe5b145b80156108055750600060058111156107e257fe5b600060060160010160149054906101000a900460ff16600581111561080357fe5b145b8015610818575060006003016002015434145b151561082357600080fd5b6080604051908101604052808260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016004600581111561086157fe5b81526020013481525060006006016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360058111156108e457fe5b021790555060608201518160020155905050600060060160020154600060030160020154016000800181905550610919610d1b565b610921610924565b50565b600080600080925060009150600090506002600381111561094157fe5b600060020160009054906101000a900460ff16600381111561095f57fe5b1415610984576000600101549250600060060160000154915060006003016000015490505b7fbfca0ac24299bdf5fa2a4b773d225c9818cc78178977ab6a11bde635772a1018600060020160009054906101000a900460ff16600060030160010160149054906101000a900460ff16600060030160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600060060160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060060160010160149054906101000a900460ff16886000600301600201548b6000800154604051808b6003811115610a5757fe5b60ff1681526020018a6005811115610a6b57fe5b60ff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001866005811115610ae957fe5b60ff1681526020018581526020018481526020018381526020018281526020019a505050505050505050505060405180910390a1505050565b600060030160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610bd75750600060060160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1515610be257600080fd5b50565b60008060020160006101000a81548160ff02191690836003811115610c0657fe5b021790555060008060010181905550600080600001819055506000806003016000018190555060008060030160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060030160010160146101000a81548160ff02191690836005811115610c9757fe5b02179055506000806006016000018190555060008060060160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060060160010160146101000a81548160ff02191690836005811115610d1457fe5b0217905550565b6001600a60014303406001900460ff16811515610d3457fe5b060160ff166000600101819055506002600060020160006101000a81548160ff02191690836003811115610d6457fe5b02179055506000600601600001546000600301600001541415610dda576003600060030160010160146101000a81548160ff02191690836005811115610da657fe5b02179055506003600060060160010160146101000a81548160ff02191690836005811115610dd057fe5b0217905550610fdd565b600060010154600060030160000154118015610e025750600060010154600060060160000154115b15610e60576003600060030160010160146101000a81548160ff02191690836005811115610e2c57fe5b02179055506003600060060160010160146101000a81548160ff02191690836005811115610e5657fe5b0217905550610fdc565b60006006016000015460006001015403600060030160000154600060010154031015610edf576001600060030160010160146101000a81548160ff02191690836005811115610eab57fe5b02179055506002600060060160010160146101000a81548160ff02191690836005811115610ed557fe5b0217905550610fdb565b60006003016000015460006001015403600060060160000154600060010154031015610f5e576002600060030160010160146101000a81548160ff02191690836005811115610f2a57fe5b02179055506001600060060160010160146101000a81548160ff02191690836005811115610f5457fe5b0217905550610fda565b6005600060030160010160146101000a81548160ff02191690836005811115610f8357fe5b02179055506005600060060160010160146101000a81548160ff02191690836005811115610fad57fe5b02179055506003600060020160006101000a81548160ff02191690836003811115610fd457fe5b02179055505b5b5b5b5600a165627a7a72305820dc057e7e369da73c9164a832286b91539feb9dcd7315e87ed69cadbcb54d6dce0029",
  "deployedBytecode": "0x606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634a0ca9751461005957806363bd1d4a14610074578063dc2be4c21461007e575b005b610072600480803560ff16906020019091905050610099565b005b61007c61036a565b005b610097600480803560ff1690602001909190505061076b565b005b600060038111156100a657fe5b600060020160009054906101000a900460ff1660038111156100c457fe5b1480156100fc5750600060058111156100d957fe5b600060030160010160149054906101000a900460ff1660058111156100fa57fe5b145b801561013357506000600581111561011057fe5b600060060160010160149054906101000a900460ff16600581111561013157fe5b145b151561013e57600080fd5b60a06040519081016040528060008152602001600081526020016001600381111561016557fe5b81526020016080604051908101604052808460ff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600460058111156101a857fe5b815260200134815250815260200160806040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060058111156101f357fe5b8152602001600081525081525060008082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600381111561023957fe5b02179055506060820151816003016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360058111156102bc57fe5b02179055506060820151816002015550506080820151816006016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083600581111561034b57fe5b0217905550606082015181600201555050905050610367610924565b50565b600080600080600061037b33610b22565b6002600381111561038857fe5b600060020160009054906101000a900460ff1660038111156103a657fe5b1480156103de5750600060058111156103bb57fe5b600060030160010160149054906101000a900460ff1660058111156103dc57fe5b115b80156104155750600460058111156103f257fe5b600060030160010160149054906101000a900460ff16600581111561041357fe5b105b801561044c57506000600581111561042957fe5b600060060160010160149054906101000a900460ff16600581111561044a57fe5b115b801561048357506004600581111561046057fe5b600060060160010160149054906101000a900460ff16600581111561048157fe5b105b151561048e57600080fd5b60008001549450600060030160010160149054906101000a900460ff169350600060060160010160149054906101000a900460ff169250600060030160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600060060160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610523610be5565b6003600581111561053057fe5b84600581111561053c57fe5b14801561055f57506003600581111561055157fe5b83600581111561055d57fe5b145b15610601578173ffffffffffffffffffffffffffffffffffffffff166108fc60028781151561058a57fe5b049081150290604051600060405180830381858888f1935050505015156105b057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6002878115156105d657fe5b049081150290604051600060405180830381858888f1935050505015156105fc57600080fd5b610764565b6001600581111561060e57fe5b84600581111561061a57fe5b1415610665578173ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050151561066057600080fd5b610763565b6001600581111561067257fe5b83600581111561067e57fe5b14156106c9578073ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f1935050505015156106c457600080fd5b610762565b8173ffffffffffffffffffffffffffffffffffffffff166108fc6002878115156106ef57fe5b049081150290604051600060405180830381858888f19350505050151561071557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc60028781151561073b57fe5b049081150290604051600060405180830381858888f19350505050151561076157600080fd5b5b5b5b5050505050565b6001600381111561077857fe5b600060020160009054906101000a900460ff16600381111561079657fe5b1480156107ce5750600460058111156107ab57fe5b600060030160010160149054906101000a900460ff1660058111156107cc57fe5b145b80156108055750600060058111156107e257fe5b600060060160010160149054906101000a900460ff16600581111561080357fe5b145b8015610818575060006003016002015434145b151561082357600080fd5b6080604051908101604052808260ff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016004600581111561086157fe5b81526020013481525060006006016000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360058111156108e457fe5b021790555060608201518160020155905050600060060160020154600060030160020154016000800181905550610919610d1b565b610921610924565b50565b600080600080925060009150600090506002600381111561094157fe5b600060020160009054906101000a900460ff16600381111561095f57fe5b1415610984576000600101549250600060060160000154915060006003016000015490505b7fbfca0ac24299bdf5fa2a4b773d225c9818cc78178977ab6a11bde635772a1018600060020160009054906101000a900460ff16600060030160010160149054906101000a900460ff16600060030160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600060060160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060060160010160149054906101000a900460ff16886000600301600201548b6000800154604051808b6003811115610a5757fe5b60ff1681526020018a6005811115610a6b57fe5b60ff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001866005811115610ae957fe5b60ff1681526020018581526020018481526020018381526020018281526020019a505050505050505050505060405180910390a1505050565b600060030160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610bd75750600060060160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b1515610be257600080fd5b50565b60008060020160006101000a81548160ff02191690836003811115610c0657fe5b021790555060008060010181905550600080600001819055506000806003016000018190555060008060030160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060030160010160146101000a81548160ff02191690836005811115610c9757fe5b02179055506000806006016000018190555060008060060160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060060160010160146101000a81548160ff02191690836005811115610d1457fe5b0217905550565b6001600a60014303406001900460ff16811515610d3457fe5b060160ff166000600101819055506002600060020160006101000a81548160ff02191690836003811115610d6457fe5b02179055506000600601600001546000600301600001541415610dda576003600060030160010160146101000a81548160ff02191690836005811115610da657fe5b02179055506003600060060160010160146101000a81548160ff02191690836005811115610dd057fe5b0217905550610fdd565b600060010154600060030160000154118015610e025750600060010154600060060160000154115b15610e60576003600060030160010160146101000a81548160ff02191690836005811115610e2c57fe5b02179055506003600060060160010160146101000a81548160ff02191690836005811115610e5657fe5b0217905550610fdc565b60006006016000015460006001015403600060030160000154600060010154031015610edf576001600060030160010160146101000a81548160ff02191690836005811115610eab57fe5b02179055506002600060060160010160146101000a81548160ff02191690836005811115610ed557fe5b0217905550610fdb565b60006003016000015460006001015403600060060160000154600060010154031015610f5e576002600060030160010160146101000a81548160ff02191690836005811115610f2a57fe5b02179055506001600060060160010160146101000a81548160ff02191690836005811115610f5457fe5b0217905550610fda565b6005600060030160010160146101000a81548160ff02191690836005811115610f8357fe5b02179055506005600060060160010160146101000a81548160ff02191690836005811115610fad57fe5b02179055506003600060020160006101000a81548160ff02191690836003811115610fd457fe5b02179055505b5b5b5b5600a165627a7a72305820dc057e7e369da73c9164a832286b91539feb9dcd7315e87ed69cadbcb54d6dce0029",
  "sourceMap": "26:5891:0:-;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "26:5891:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1396:466;;;;;;;;;;;;;;;;;;;;2399:1232;;;;;;1868:525;;;;;;;;;;;;;;;;;;;;1396:466;1475:33;1460:48;;;;;;;;:4;:11;;;;;;;;;;;;:48;;;;;;;;;:123;;;;;1555:28;1529:54;;;;;;;;:4;:15;;:22;;;;;;;;;;;;:54;;;;;;;;;1460:123;:193;;;;;1625:28;1604:49;;;;;;;;:4;:10;;:17;;;;;;;;;;;;:49;;;;;;;;;1460:193;1452:202;;;;;;;;1673:159;;;;;;;;;1678:1;1673:159;;;;1681:1;1673:159;;;;1684:29;1673:159;;;;;;;;;;;;1715:68;;;;;;;;;1723:6;1715:68;;;;;;1731:10;1715:68;;;;;;1743:28;1715:68;;;;;;;;;;;;1773:9;1715:68;;;1673:159;;;;1785:46;;;;;;;;;1793:1;1785:46;;;;1796:1;1785:46;;;;;;1799:28;1785:46;;;;;;;;;;;;1829:1;1785:46;;;1673:159;;;1666:4;:166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1840:15;:13;:15::i;:::-;1396:466;:::o;2399:1232::-;2827:15;2860:24;2917:25;2969:19;3018:20;2440:28;2457:10;2440:16;:28::i;:::-;2499:30;2483:46;;;;;;;;:4;:11;;;;;;;;;;;;:46;;;;;;;;;:120;;;;;2575:28;2550:53;;;;;;;;:4;:15;;:22;;;;;;;;;;;;:53;;;;;;;;;2483:120;:194;;;;;2649:28;2624:53;;;;;;;;:4;:15;;:22;;;;;;;;;;;;:53;;;;;;;;;2483:194;:262;;;;;2717:28;2697:48;;;;;;;;:4;:10;;:17;;;;;;;;;;;;:48;;;;;;;;;2483:262;:330;;;;;2785:28;2765:48;;;;;;;;:4;:10;;:17;;;;;;;;;;;;:48;;;;;;;;;2483:330;2475:339;;;;;;;;2845:4;:8;;;2827:26;;2887:4;:15;;:22;;;;;;;;;;;;2860:49;;2945:4;:10;;:17;;;;;;;;;;;;2917:45;;2991:4;:15;;:20;;;;;;;;;;;;2969:42;;3041:4;:10;;:15;;;;;;;;;;;;3018:38;;3068:11;:9;:11::i;:::-;3135:24;3121:38;;;;;;;;:10;:38;;;;;;;;;:81;;;;;3178:24;3163:39;;;;;;;;:11;:39;;;;;;;;;3121:81;3117:509;;;3213:11;:20;;:31;3242:1;3234:7;:9;;;;;;;;3213:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3253:12;:21;;:32;3283:1;3275:7;:9;;;;;;;;3253:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3117:509;;;3327:27;3313:41;;;;;;;;:10;:41;;;;;;;;;3309:310;;;3368:11;:20;;:29;3389:7;3368:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3309:310;;;3433:27;3418:42;;;;;;;;:11;:42;;;;;;;;;3414:205;;;3474:12;:21;;:30;3496:7;3474:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3414:205;;;3533:11;:20;;:31;3562:1;3554:7;:9;;;;;;;;3533:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3576:12;:21;;:32;3606:1;3598:7;:9;;;;;;;;3576:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3414:205;3309:310;3117:509;2399:1232;;;;;:::o;1868:525::-;1946:29;1931:44;;;;;;;;:4;:11;;;;;;;;;;;;:44;;;;;;;;;:119;;;;;2022:28;1996:54;;;;;;;;:4;:15;;:22;;;;;;;;;;;;:54;;;;;;;;;1931:119;:189;;;;;2092:28;2071:49;;;;;;;;:4;:10;;:17;;;;;;;;;;;;:49;;;;;;;;;1931:189;:247;;;;;2153:4;:15;;:25;;;2140:9;:38;1931:247;1923:256;;;;;;;;2200:68;;;;;;;;;2208:6;2200:68;;;;;;2216:10;2200:68;;;;;;2228:28;2200:68;;;;;;;;;;;;2258:9;2200:68;;;2187:4;:10;;:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2315:4;:10;;:20;;;2287:4;:15;;:25;;;:48;2276:4;:8;;:59;;;;2343:20;:18;:20::i;:::-;2371:15;:13;:15::i;:::-;1868:525;:::o;3636:746::-;3716:17;3747:15;3776:20;3736:1;3716:21;;3765:1;3747:19;;3799:1;3776:24;;3830:30;3815:45;;;;;;;;:4;:11;;;;;;;;;;;;:45;;;;;;;;;3811:254;;;3946:4;:12;;;3931:27;;3985:4;:10;;:16;;;3972:29;;4033:4;:15;;:21;;;4015:39;;3811:254;4080:294;4102:4;:11;;;;;;;;;;;;4126:4;:15;;:22;;;;;;;;;;;;4161:4;:15;;:20;;;;;;;;;;;;4194:15;4221:4;:10;;:15;;;;;;;;;;;;4249:4;:10;;:17;;;;;;;;;;;;4279:10;4302:4;:15;;:25;;;4340:12;4365:4;:8;;;4080:294;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3636:746;;;:::o;4388:198::-;4527:4;:15;;:20;;;;;;;;;;;;4517:30;;:6;:30;;;:59;;;;4561:4;:10;;:15;;;;;;;;;;;;4551:25;;:6;:25;;;4517:59;4509:68;;;;;;;;4388:198;:::o;997:393::-;1067:33;1053:4;:11;;;:47;;;;;;;;;;;;;;;;;;;;;;;;1123:1;1108:4;:12;;:16;;;;1143:1;1132:4;:8;;:12;;;;1177:1;1153:4;:15;;:21;;:25;;;;1209:1;1186:4;:15;;:20;;;:24;;;;;;;;;;;;;;;;;;1243:28;1218:4;:15;;:22;;;:53;;;;;;;;;;;;;;;;;;;;;;;;1299:1;1280:4;:10;;:16;;:20;;;;1326:1;1308:4;:10;;:15;;;:19;;;;;;;;;;;;;;;;;;1355:28;1335:4;:10;;:17;;;:48;;;;;;;;;;;;;;;;;;;;;;;;997:393::o;4592:1321::-;4775:1;4770:2;4766:1;4753:12;:14;4737:31;4731:38;;;:41;;;;;;;;;;:45;4716:60;;:4;:12;;:60;;;;4800:30;4786:4;:11;;;:44;;;;;;;;;;;;;;;;;;;;;;;;4870:4;:10;;:16;;;4845:4;:15;;:21;;;:41;4841:1066;;;4925:24;4900:4;:15;;:22;;;:49;;;;;;;;;;;;;;;;;;;;;;;;4981:24;4961:4;:10;;:17;;;:44;;;;;;;;;;;;;;;;;;;;;;;;4841:1066;;;5050:4;:12;;;5026:4;:15;;:21;;;:36;:71;;;;;5085:4;:12;;;5066:4;:10;;:16;;;:31;5026:71;5022:885;;;5136:24;5111:4;:15;;:22;;;:49;;;;;;;;;;;;;;;;;;;;;;;;5192:24;5172:4;:10;;:17;;;:44;;;;;;;;;;;;;;;;;;;;;;;;5022:885;;;5307:4;:10;;:16;;;5292:4;:12;;;:31;5266:4;:15;;:21;;;5251:4;:12;;;:36;5250:74;5246:651;;;5366:27;5341:4;:15;;:22;;;:52;;;;;;;;;;;;;;;;;;;;;;;;5428:25;5408:4;:10;;:17;;;:45;;;;;;;;;;;;;;;;;;;;;;;;5246:651;;;5529:4;:15;;:21;;;5514:4;:12;;;:36;5493:4;:10;;:16;;;5478:4;:12;;;:31;5477:74;5473:424;;;5593:25;5568:4;:15;;:22;;;:50;;;;;;;;;;;;;;;;;;;;;;;;5653:27;5633:4;:10;;:17;;;:47;;;;;;;;;;;;;;;;;;;;;;;;5473:424;;;5740:26;5715:4;:15;;:22;;;:51;;;;;;;;;;;;;;;;;;;;;;;;5801:26;5781:4;:10;;:17;;;:46;;;;;;;;;;;;;;;;;;;;;;;;5856:27;5842:4;:11;;;:41;;;;;;;;;;;;;;;;;;;;;;;;5473:424;5246:651;5022:885;4841:1066;4592:1321::o",
  "source": "pragma solidity ^0.4.8;\n  contract Bet {\n\n    //status enums\n    enum BetStatusEnum {STATUS_UNKNOWN,STATUS_WINNER,STATUS_LOSE,STATUS_TIE,STATUS_PENDING, STATUS_ERROR}\n    enum GameStatusEnum {STATUS_NOT_STARTED, STATUS_STARTED, STATUS_COMPLETE, STATUS_ERROR }\n\n    //the 'better' structure\n    struct JediBet {\n      uint guess;\n      address addr;\n      BetStatusEnum status;\n      uint betAmount;\n    }\n\n    //the 'game' structure\n    struct Game {\n      uint pot;\n      uint outcome;\n      GameStatusEnum status;\n      JediBet originator;\n      JediBet taker;\n    }\n\n    //bet status event\n    event BetStatus (\n      GameStatusEnum gameStatus, \n      BetStatusEnum originatorStatus, \n      address originatorAddress, \n      uint originatorGuess,\n      address takerAddress, \n      BetStatusEnum takerStatus, \n      uint takerGuess, \n      uint betAmount, \n      uint actualNumber, \n      uint pot);\n\n    //the game\n    Game game;\n\n    //fallback function\n    function() public payable {}\n\n    function resetGame() private {\n      //reset game\n      game.status = GameStatusEnum.STATUS_NOT_STARTED;\n      game.outcome = 0;\n      game.pot = 0;\n\n      game.originator.guess = 0;\n      game.originator.addr = 0;\n      game.originator.status = BetStatusEnum.STATUS_UNKNOWN;\n\n      game.taker.guess = 0;\n      game.taker.addr = 0;\n      game.taker.status = BetStatusEnum.STATUS_UNKNOWN;\n    }\n\n    function createBet(uint8 _guess) public payable {\n      require(game.status == GameStatusEnum.STATUS_NOT_STARTED \n                && game.originator.status == BetStatusEnum.STATUS_UNKNOWN \n                && game.taker.status == BetStatusEnum.STATUS_UNKNOWN);    \n      game = Game(0, 0, GameStatusEnum.STATUS_STARTED, JediBet(_guess, msg.sender, BetStatusEnum.STATUS_PENDING, msg.value), JediBet(0, 0, BetStatusEnum.STATUS_UNKNOWN, 0));\n      getBetOutcome();\n    }\n\n    function takeBet(uint8 _guess) public payable { \n      require(game.status == GameStatusEnum.STATUS_STARTED \n                && game.originator.status == BetStatusEnum.STATUS_PENDING \n                && game.taker.status == BetStatusEnum.STATUS_UNKNOWN\n                && msg.value == game.originator.betAmount);\n      game.taker = JediBet(_guess, msg.sender, BetStatusEnum.STATUS_PENDING, msg.value);\n      game.pot = game.originator.betAmount + game.taker.betAmount;\n      generateBetOutcome();\n      getBetOutcome();\n    }\n\n    function payout() public payable {\n\n     checkPermissions(msg.sender);\n     require(game.status ==  GameStatusEnum.STATUS_COMPLETE \n                && game.originator.status > BetStatusEnum.STATUS_UNKNOWN \n                && game.originator.status < BetStatusEnum.STATUS_PENDING\n                && game.taker.status > BetStatusEnum.STATUS_UNKNOWN\n                && game.taker.status < BetStatusEnum.STATUS_PENDING);\n     \n     uint256 origPot = game.pot;\n     BetStatusEnum origStatus = game.originator.status; \n     BetStatusEnum takerStatus = game.taker.status;\n     address origAddress = game.originator.addr;\n     address takerAddress = game.taker.addr;\n    \n     resetGame(); // optimistic accounting\n     \n     if (origStatus == BetStatusEnum.STATUS_TIE && takerStatus == BetStatusEnum.STATUS_TIE) {\n       origAddress.transfer(origPot/2);\n       takerAddress.transfer(origPot/2);\n     } else {\n        if (origStatus == BetStatusEnum.STATUS_WINNER) {\n          origAddress.transfer(origPot);\n        } else if (takerStatus == BetStatusEnum.STATUS_WINNER) {\n          takerAddress.transfer(origPot);\n        } else {\n          origAddress.transfer(origPot/2);\n          takerAddress.transfer(origPot/2);\n        }\n     }\n   }\n\n   function getBetOutcome() private {\n\n        //hide the bets and outcome\n        uint actualNumber = 0;\n        uint takerGuess = 0;\n        uint originatorGuess = 0;\n\n        if (game.status == GameStatusEnum.STATUS_COMPLETE) {\n            //allow the bets and outcome to be visible\n            actualNumber = game.outcome;\n            takerGuess = game.taker.guess;\n            originatorGuess = game.originator.guess;\n        }\n\n        emit BetStatus (\n          game.status, \n          game.originator.status, \n          game.originator.addr, \n          originatorGuess,\n          game.taker.addr, \n          game.taker.status, \n          takerGuess, \n          game.originator.betAmount, \n          actualNumber, \n          game.pot);\n     }\n\n    function checkPermissions(address sender) view private {\n     //only the originator or taker can call this function\n     require(sender == game.originator.addr || sender == game.taker.addr);  \n    }\n\n    function generateBetOutcome() private {\n        //todo - not a great way to generate a random number but ok for now\n        game.outcome = uint8(block.blockhash(block.number-1))%10 + 1;\n        game.status = GameStatusEnum.STATUS_COMPLETE;\n\n        if (game.originator.guess == game.taker.guess) {\n          game.originator.status = BetStatusEnum.STATUS_TIE;\n          game.taker.status = BetStatusEnum.STATUS_TIE;\n        } else if (game.originator.guess > game.outcome && game.taker.guess > game.outcome) {\n          game.originator.status = BetStatusEnum.STATUS_TIE;\n          game.taker.status = BetStatusEnum.STATUS_TIE;\n        } else {\n           if ((game.outcome - game.originator.guess) < (game.outcome - game.taker.guess)) {\n             game.originator.status = BetStatusEnum.STATUS_WINNER;\n             game.taker.status = BetStatusEnum.STATUS_LOSE;\n           } else if ((game.outcome - game.taker.guess) < (game.outcome - game.originator.guess)) {\n             game.originator.status = BetStatusEnum.STATUS_LOSE;\n             game.taker.status = BetStatusEnum.STATUS_WINNER;\n           } else {\n             game.originator.status = BetStatusEnum.STATUS_ERROR;\n             game.taker.status = BetStatusEnum.STATUS_ERROR;\n             game.status = GameStatusEnum.STATUS_ERROR;\n           }\n        }\n    }\n  }",
  "sourcePath": "/Users/macuser/Projects/Solidity/react-dapp/contracts/Bet.sol",
  "compiler": {
    "name": "solc",
    "version": "0.4.21+commit.dfe3193c.Emscripten.clang"
  },
  "networks": {
    "3": {
      "events": {},
      "links": {},
      "address": "0x32910cf2215ea99a90097857e45988d1cb0ad1ce"
    }
  },
  "schemaVersion": "1.0.1",
  "updatedAt": "2018-04-05T13:48:27.047Z"
}